import java_cup.runtime.*;
import java.lang.*;
import java.util.*;

// %%

terminal ASSIGN, SEMI, COMMA, PRINT, LPAREN, RPAREN, LCURLY, RCURLY, LBRACKET, RBRACKET, INT;
terminal PLUS, MINUS, TIMES, DIV, UMINUS;
terminal PLUS_ASSIGN, MINUS_ASSIGN, TIMES_ASSIGN, DIV_ASSIGN;
terminal EQ, NEQ, LT, GT, LE, GE;
terminal NOT, OR, AND;
terminal String IF, ELSE, DO, WHILE;
terminal Condition FOR;
terminal String ID, NUMBER;

nonterminal Object statement_list, stmt, if_stmt, else_stmt, while_stmt, do_while_stmt, for_stmt, typedef, vardeclare;
nonterminal String expr, op_asign_expr, array_expr, array_init, init_list;
nonterminal Condition cond, logical;

// lowest priority
precedence left IF;
precedence right ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, TIMES_ASSIGN, DIV_ASSIGN;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left UMINUS; // there's nothing at left of UMINUS
precedence left AND, OR;
precedence left ELSE;
precedence right NOT;
// highest priority


// %%


statement_list ::= statement_list stmt
                   |
                   stmt
                   ;

stmt ::= typedef vardeclare SEMI
         |
         expr SEMI
         |
         if_stmt
         |
         for_stmt
         |
         do_while_stmt
         |
         while_stmt
         |
         PRINT expr:e SEMI
         {: Translator._print(e); :}
         |
         LCURLY statement_list RCURLY
         {: /* done in the inner statement list */ :}
         |
         error:e SEMI
         {: Translator._errorTrace("CUP Error: La sintaxis no es correcta"); :}
         ;

// ================================================================
// ==================== VARIABLE DECLARE / INIT ===================

typedef ::= INT
            {: Variables.setCurrentType("int"); :}
            ;

vardeclare ::= ID:id
               {: Variables.declareVar(id); :}
               |
               ID:id LBRACKET NUMBER:n RBRACKET array_init:arr
               {:
                   String[] list = arr.split(",");
                   int sz = Integer.parseInt(n);

                   switch (list[0]) {
                       case "":
                           Variables.declareList(id, n);
                           break;
                       default:
                           if(list.length > sz) {
                               Translator._errorTrace("CUP Error: Array initialization length mismatch (ID[n] = {..})");
                           }
                           Variables.declareList(id, n);
                           Translator._updateArray(id, list);
                   }
               :}
               ;


// ================================================================
// ==================== ARRAY DECLARE / INIT ======================

array_init ::= ASSIGN LCURLY init_list:ls RCURLY
               {: RESULT = ls; :}
               |
               // empty
               {: RESULT = new String(); :}
               ;

init_list ::= init_list:ls COMMA expr:e
              {: RESULT = ls + "," + e; :}
              |
              expr:e
              {: RESULT = e; :}
              ;

// ================================================================
// ======================= IF STATEMENT ===========================

if_stmt ::= IF:endIf LPAREN cond:c RPAREN
            {: Translator._label(c.TrueLabel()); :}
            stmt
            {:
               Translator._goto(endIf);
               Translator._label(c.FalseLabel());
            :}
            else_stmt
            {:
               Translator._goto(endIf);
               Translator._label(endIf);
            :}
            ;

else_stmt ::= ELSE stmt
              |
              // empty
              ;

// ================================================================
// ====================== WHILE STATEMENT =========================

while_stmt ::= WHILE:loopLabel LPAREN
               {: Translator._label(loopLabel); :}
               cond:c RPAREN
               {: Translator._label(c.TrueLabel()); :}
               stmt
               {:
                  Translator._goto(loopLabel);
                  Translator._label(c.FalseLabel());
               :}
               ;


do_while_stmt ::= DO:loopLabel
                  {: Translator._label(loopLabel); :}
                  stmt WHILE LPAREN cond:c RPAREN SEMI
                  {:
                     Translator._label(c.TrueLabel());
                     Translator._goto(loopLabel);
                     Translator._label(c.FalseLabel());
                  :}
                  ;

// ================================================================
// ======================= FOR STATEMENT ==========================

for_stmt ::= FOR:forLabel LPAREN expr SEMI
             // with TrueLabel we model the loop label
             {: Translator._label(forLabel.TrueLabel()); :}
             cond:c1 SEMI
             // with FalseLabel we model the modifier expression
             {: Translator._label(forLabel.FalseLabel()); :}
             expr RPAREN
             {:
                Translator._goto(forLabel.TrueLabel());
                Translator._label(c1.TrueLabel());
             :}
             stmt
             {:
                Translator._goto(forLabel.FalseLabel());
                Translator._label(c1.FalseLabel());
             :}
             ;


// ================================================================
// ======================== ARITHMETIC OPS ========================

expr ::= expr:e1 PLUS expr:e2
         {: RESULT = Translator.arithmetic(e1, "+", e2, false); :}
         |
         expr:e1 MINUS expr:e2
         {: RESULT = Translator.arithmetic(e1, "-", e2, false); :}
         |
         expr:e1 TIMES expr:e2
         {: RESULT = Translator.arithmetic(e1, "*", e2, false); :}
         |
         expr:e1 DIV expr:e2
         {: RESULT = Translator.arithmetic(e1, "/", e2, false); :}
         |
         MINUS expr:e
         {: RESULT = Translator.arithmetic("0", "-", e, false); :}
         %prec UMINUS
         |
         LPAREN expr:e RPAREN
         {: RESULT = e; :}
         |
         ID:id ASSIGN expr:e
         {:
            if(!Variables.isDeclared(id)) { Translator._errorTrace("CUP Error: variable no declarada (ID = expr)"); }

            if (Variables.isList(id) && Variables.isList(e)) {
                if (Variables.getSize(id) >= Variables.getSize(e)) {
                    Translator._copyArray(id, e);
                } else {
                    Translator._errorTrace("CUP Error: La capacidad de las listas no coinciden");
                }
            } else {
                Translator._applyAssign(id, e);
            }

            RESULT = id;
         :}
         |
         op_asign_expr:e
         {: RESULT = e; :}
         |
         array_expr:e
         {: RESULT = e; :}
         |
         ID:id
         {:
            if(!Variables.isDeclared(id)) { Translator._errorTrace("CUP Error: variable no declarada (ID = expr)"); }
            RESULT = id;
         :}
         |
         NUMBER:n
         {: RESULT = n; :}
         ;

op_asign_expr ::= ID:id PLUS_ASSIGN expr:e
                  {:
                      if(!Variables.isDeclared(id)) { Translator._errorTrace("CUP Error: variable no declarada (ID = expr)"); }
                      RESULT = Translator.arithmetic(id, "+", e, true);
                  :}
                  |
                  ID:id MINUS_ASSIGN expr:e
                  {:
                      if(!Variables.isDeclared(id)) { Translator._errorTrace("CUP Error: variable no declarada (ID = expr)"); }
                      RESULT = Translator.arithmetic(id, "-", e, true);
                  :}
                  |
                  ID:id TIMES_ASSIGN expr:e
                  {:
                      if(!Variables.isDeclared(id)) { Translator._errorTrace("CUP Error: variable no declarada (ID = expr)"); }
                      RESULT = Translator.arithmetic(id, "*", e, true);
                  :}
                  |
                  ID:id DIV_ASSIGN expr:e
                  {:
                      if(!Variables.isDeclared(id)) { Translator._errorTrace("CUP Error: variable no declarada (ID = expr)"); }
                      RESULT = Translator.arithmetic(id, "/", e, true);
                  :}
                  ;

array_expr ::= ID:id LBRACKET expr:e RBRACKET
               {:
                   if (!Variables.isDeclared(id)) { Translator._errorTrace("CUP Error: variable no declarada (ID[..])"); }

                   Translator._checkRange(id, e);

                   RESULT = Variables.declareTemp("int", "0");
                   String _id = String.format("%s[%s]", id, e);
                   Translator._applyAssign(RESULT, _id);
               :}
               |
               ID:id LBRACKET expr:e1 RBRACKET ASSIGN expr:e2
               {:
                   if(!Variables.isDeclared(id)) { Translator._errorTrace("CUP Error: variable no declarada (ID[..] = expr)"); }

                   Translator._checkRange(id, e1);

                   RESULT = id;
                   String _id = String.format("%s[%s]", id, e1);
                   Translator._applyAssign(_id, e2);
               :}
               |
               ID:id ASSIGN LCURLY init_list:ls RCURLY
               {:
                    if(!Variables.isDeclared(id)) { Translator._errorTrace("CUP Error: variable no declarada (ID = {..})"); }

                    String[] list = ls.split(",");
                    int size = Variables.getSize(id);

                    if (list.length > size) {
                        Translator._errorTrace("CUP Error: La lista de origen es mayor que la de destino");
                    } else {
                        Translator._updateArray(id, list);
                    }

                    RESULT = id;
               :}
               ;
// ================================================================
// ======================== COMPARISON OPS ========================

cond ::= expr:e1 EQ expr:e2
         {: RESULT = Translator.comparison(e1, Translator.EQ, e2, false); :}
         |
         expr:e1 LT expr:e2
         {: RESULT = Translator.comparison(e1, Translator.LT, e2, false); :}
         |
         expr:e1 NEQ expr:e2
         {: RESULT = Translator.comparison(e1, Translator.EQ, e2, true); :}
         |
         expr:e1 GT expr:e2
         {: RESULT = Translator.comparison(e2, Translator.LT, e1, false); :}
         |
         expr:e1 LE expr:e2
         {:
            Condition eq0 = Translator.comparison(e1, Translator.EQ, e2, false);
            Translator._label(eq0.FalseLabel());
            Condition lt0 = Translator.comparison(e1, Translator.LT, e2, false);
            Translator._label(eq0.TrueLabel());
            Translator._goto(lt0.TrueLabel());
            RESULT = lt0;
         :}
         |
         expr:e1 GE expr:e2
         {:
            Condition eq1 = Translator.comparison(e1, Translator.EQ, e2, false);
            Translator._label(eq1.FalseLabel());
            Condition lt1 = Translator.comparison(e2, Translator.LT, e1, false);
            Translator._label(eq1.TrueLabel());
            Translator._goto(lt1.TrueLabel());
            RESULT = lt1;
         :}
         |
         LPAREN cond:c RPAREN
         {: RESULT = c; :}
         |
         logical:l
         {: RESULT = l; :}
         ;

// ================================================================
// ======================== LOGICAL OPS ===========================

logical ::= NOT cond:c
            {: c.permute(); RESULT = c; :}
            |
            cond:c1 AND
            {: Translator._label(c1.TrueLabel()); :}
            cond:c2
            {:
                Translator._label(c1.FalseLabel());
                Translator._goto(c2.FalseLabel());
                RESULT = c2;
            :}
            |
            cond:c1 OR
            {: Translator._label(c1.FalseLabel()); :}
            cond:c2
            {:
                Translator._label(c1.TrueLabel());
                Translator._goto(c2.TrueLabel());
                RESULT = c2;
            :}
            ;
