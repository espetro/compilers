import java_cup.runtime.*;
import java.lang.*;
import java.util.*;

// %%

terminal ASSIGN, INT, CHAR, STRING, SEMI, COMMA, PRINT, LPAREN, RPAREN, LCURLY, RCURLY, LBRACKET, RBRACKET;
terminal LENGTH_PROP, PLUS, MINUS, TIMES, DIV, UMINUS;
terminal EQ, NEQ, LT, GT, LE, GE;
terminal NOT, OR, AND;
terminal String IF, ELSE, DO, WHILE;
terminal Condition FOR;
terminal String ID, CHAR_CONST, STRING_CONST, NUMBER;

nonterminal statement_list, stmt, vartype, vardeclare, if_stmt, else_stmt, while_stmt, do_while_stmt, for_stmt;
nonterminal String expr, array_expr, vardims, varinit, init_list;
nonterminal Condition cond, logical;

// lowest priority
precedence left IF;
precedence right ASSIGN;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence right UMINUS;
precedence left AND, OR;
precedence left ELSE;
precedence right NOT;
// highest priority


// %%


statement_list ::= statement_list stmt
                   |
                   stmt
                   ;

stmt ::= vartype vardeclare SEMI
         |
         expr SEMI
         |
         if_stmt
         |
         for_stmt
         |
         do_while_stmt
         |
         while_stmt
         |
         PRINT expr:e SEMI
         {: Translator.print(e); :}
         |
         LCURLY statement_list RCURLY
         {: /* done in the inner statement list */ :}
         ;

         /**
         |
         error:e SEMI // handles errors while parsing (not recommended)
         {: :}
         ;
         */

// ================================================================
// =================== VARIABLE/ARRAY DECLARE =====================

vartype ::= CHAR
            {: Variables.setCurrentType("char"); :}
            |
            INT
            {: Variables.setCurrentType("int"); :}
            |
            STRING
            {: Variables.setCurrentType("string"); :}
            ;

vardeclare ::= vardeclare COMMA ID:_id vardims:_dims varinit:_init
               {:
                   String length = _dims.isEmpty() ? "0" : _dims;
                   Variables.declareVar(_id, length);

                   if (!_init.isEmpty()) {
                       if (_init.contains(",")) {
                           Arrays.init(_id, _init);
                       } else {
                           Translator.assignment(_id, _init);
                       }
                   }
               :}
               |
               ID:_id vardims:_dims varinit:_init
               {:
                   String length = _dims.isEmpty() ? "0" : _dims;
                   Variables.declareVar(_id, length);

                   if (!_init.isEmpty()) {
                       if (Variables.isArrayConst(_init)) { // check for array init (eg {1,2,3})
                           Arrays.init(_id, _init);
                       } else if (Variables.isString(_init)) {
                           Strings.assign(_id, _init);
                       } else {
                           Translator.assignment(_id, _init);
                       }
                   }
               :}
               ;

vardims ::= LBRACKET NUMBER:n RBRACKET
            {: RESULT = n; :}
            |
            // empty
            {: RESULT = new String(); :}
            ;

varinit ::= ASSIGN expr:e
            {: RESULT = e; :} // init_list is also an expr (eg {1,2,3})
            |
            // empty
            {: RESULT = new String(); :}
            ;

init_list ::= init_list:ls COMMA expr:e
              {: RESULT = ls + "," + e; :}
              |
              expr:e
              {: RESULT = e; :}
              ;


// ================================================================
// ======================= IF STATEMENT ===========================

if_stmt ::= IF:endIf LPAREN cond:c RPAREN
            {: Translator._label(c.TrueLabel()); :}
            stmt
            {:
               Translator._goto(endIf);
               Translator._label(c.FalseLabel());
            :}
            else_stmt
            {:
               Translator._goto(endIf);
               Translator._label(endIf);
            :}
            ;

else_stmt ::= ELSE stmt
              |
              // empty
              ;

// ================================================================
// ====================== WHILE STATEMENT =========================

while_stmt ::= WHILE:loopLabel LPAREN
               {: Translator._label(loopLabel); :}
               cond:c RPAREN
               {: Translator._label(c.TrueLabel()); :}
               stmt
               {:
                  Translator._goto(loopLabel);
                  Translator._label(c.FalseLabel());
               :}
               ;


do_while_stmt ::= DO:loopLabel
                  {: Translator._label(loopLabel); :}
                  stmt WHILE LPAREN cond:c RPAREN SEMI
                  {:
                     Translator._label(c.TrueLabel());
                     Translator._goto(loopLabel);
                     Translator._label(c.FalseLabel());
                  :}
                  ;

// ================================================================
// ======================= FOR STATEMENT ==========================

for_stmt ::= FOR:forLabel LPAREN expr SEMI
             // with TrueLabel we model the loop label
             {: Translator._label(forLabel.TrueLabel()); :}
             cond:c1 SEMI
             // with FalseLabel we model the modifier expression
             {: Translator._label(forLabel.FalseLabel()); :}
             expr RPAREN
             {:
                Translator._goto(forLabel.TrueLabel());
                Translator._label(c1.TrueLabel());
             :}
             stmt
             {:
                Translator._goto(forLabel.FalseLabel());
                Translator._label(c1.FalseLabel());
             :}
             ;


// ================================================================
// ======================== ARITHMETIC OPS ========================

expr ::= expr:e1 PLUS expr:e2
         {: RESULT = Translator.arithmetic(e1, "+", e2); :}
         |
         expr:e1 MINUS expr:e2
         {: RESULT = Translator.arithmetic(e1, "-", e2); :}
         |
         expr:e1 TIMES expr:e2
         {: RESULT = Translator.arithmetic(e1, "*", e2); :}
         |
         expr:e1 DIV expr:e2
         {: RESULT = Translator.arithmetic(e1, "/", e2); :}
         |
         MINUS expr:e
         {: RESULT = Translator.arithmetic("0", "-", e); :}
         %prec UMINUS
         |
         LPAREN expr:e RPAREN
         {: RESULT = e; :}
         |
         ID:id ASSIGN expr:e
         {:
             if (Variables.isArray(id) && Variables.isArray(e)) { // both are arrays
                 Arrays.copy(id, e);
             } else if(Variables.isArray(id) && e.contains(",")) { // "e" is an init_list (eg {1,2,3})
                 Arrays.init(id, e);
             } else if (Variables.isString(id) && Variables.isString(e)) { // "e" is a string (eg "abc")
                 String.assign(id, e);
             } else {
                 Translator.assignment(id, e);
             }
             RESULT = id;
         :}
         |
         ID:i
         {: RESULT = i; :}
         |
         NUMBER:n
         {: RESULT = n; :}
         |
         CHAR_CONST:ch
         {: RESULT = ch; :}
         |
         STRING_CONST:str
         {: RESULT = str; :}
         |
         LCURLY init_list:ls RCURLY
         {: RESULT = ls; :}
         |
         array_expr:e
         {: RESULT = e; :}
         ;

// ================================================================
// ========================== ARRAY OPS ===========================

array_expr ::= ID:id LBRACKET expr:e RBRACKET
               {:
                   Variables.checkVar(id);
                   RESULT = Translator.getNewTmpVar(Variables.getType(id));

                   Arrays.check(id, e);
                   Translator._applyAssign(RESULT, String.format("%s[%s]", id, e));
               :}
               |
               ID:id LBRACKET expr:e1 RBRACKET ASSIGN expr:e2
               {:
                   Variables.checkVar(id);
                   RESULT = id;

                   Arrays.check(id, e1);
                   e2 = Variables.isChar(e2) ? Chars.toInt(e2) : e2;
                   Translator._applyAssign(String.format("%s[%s]", id, e1), e2);
               :}
               |
               ID:id LENGTH_PROP
               {: RESULT = Variables.getLength(id); :} // just return the length
               ;

// ================================================================
// ======================== COMPARISON OPS ========================

cond ::= expr:e1 EQ expr:e2
         {: RESULT = Translator.comparison(e1, Translator.EQ, e2, false); :}
         |
         expr:e1 LT expr:e2
         {: RESULT = Translator.comparison(e1, Translator.LT, e2, false); :}
         |
         expr:e1 NEQ expr:e2
         {: RESULT = Translator.comparison(e1, Translator.EQ, e2, true); :}
         |
         expr:e1 GT expr:e2
         {: RESULT = Translator.comparison(e2, Translator.LT, e1, false); :}
         |
         expr:e1 LE expr:e2
         {:
            Condition eq0 = Translator.comparison(e1, Translator.EQ, e2, false);
            Translator._label(eq0.FalseLabel());
            Condition lt0 = Translator.comparison(e1, Translator.LT, e2, false);
            Translator._label(eq0.TrueLabel());
            Translator._goto(lt0.TrueLabel());
            RESULT = lt0;
         :}
         |
         expr:e1 GE expr:e2
         {:
            Condition eq1 = Translator.comparison(e1, Translator.EQ, e2, false);
            Translator._label(eq1.FalseLabel());
            Condition lt1 = Translator.comparison(e2, Translator.LT, e1, false);
            Translator._label(eq1.TrueLabel());
            Translator._goto(lt1.TrueLabel());
            RESULT = lt1;
         :}
         |
         LPAREN cond:c RPAREN
         {: RESULT = c; :}
         |
         logical:l
         {: RESULT = l; :}
         ;

// ================================================================
// ======================== LOGICAL OPS ===========================

logical ::= NOT cond:c
            {: c.permute(); RESULT = c; :}
            |
            cond:c1 AND
            {: Translator._label(c1.TrueLabel()); :}
            cond:c2
            {:
                Translator._label(c1.FalseLabel());
                Translator._goto(c2.FalseLabel());
                RESULT = c2;
            :}
            |
            cond:c1 OR
            {: Translator._label(c1.FalseLabel()); :}
            cond:c2
            {:
                Translator._label(c1.TrueLabel());
                Translator._goto(c2.TrueLabel());
                RESULT = c2;
            :}
            ;
